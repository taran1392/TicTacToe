{"version":3,"sources":["model/cell.ts","Cell.tsx","Board.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CellState","Player","CellComponent","row","col","onClick","value","className","Void","Cross","Board","useState","dimension","setDimension","inputRef","React","createRef","Player1","player","setPlayer","Array","fill","map","board","setBoard","onCellSelected","Zero","rowSum","colSum","diagSum","anitDiagSum","playerCellState","i","checkWinner","alert","resetGame","every","cell","Player2","useEffect","style","display","justifyContent","width","placeholder","ref","defaultValue","type","newDimension","parseInt","current","rowIndex","cellValue","colIndex","Cell","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.351a46d2.chunk.js","sourcesContent":["\r\nexport enum CellState {\r\n    Cross = -1,\r\n    Void = 0,\r\n    Zero = 1\r\n\r\n}","import { CellState } from \"./model/cell\";\r\nimport React from 'react';\r\n\r\nexport interface CellProps {\r\n    value: CellState,\r\n    onClick: (row: number , col: number) => void,\r\n    row: number,\r\n    col: number\r\n}\r\n\r\nconst CellComponent: React.FC<CellProps> = ({row, col, onClick, value}) => {\r\n\r\n    return <div className=\"cell\" onClick={() => {onClick(row,col)}}>\r\n        <span>\r\n            {value == CellState.Void ? '': value == CellState.Cross? 'X': '0'}\r\n        </span>\r\n    </div>\r\n}\r\n\r\nexport default CellComponent;\r\n\r\n","import { CellState } from \"./model/cell\";\r\nimport React, { useEffect, useState } from 'react';\r\nimport CellComponent from \"./Cell\";\r\n\r\nexport enum Player {\r\n    Player1 = 'X',\r\n    Player2 = '0'\r\n}\r\n\r\n\r\nconst Board: React.FC = () => {\r\n    const [dimension, setDimension] = useState(3);\r\n    const inputRef = React.createRef<HTMLInputElement>();\r\n    const [player, setPlayer] = useState<Player>(Player.Player1);\r\n    const [board, setBoard] = useState<Array<Array<CellState>>>(new Array(3).fill(null).map(() =>new Array(3).fill(CellState.Void)));\r\n    \r\n    const checkGameOver = () => {\r\n        return board.every(row => row.every(cell => cell !== CellState.Void))\r\n    }\r\n    const checkWinner = (row: number, col: number) => {\r\n        let rowSum, colSum, diagSum, anitDiagSum ;\r\n        rowSum = colSum =diagSum =anitDiagSum = 0;\r\n        const playerCellState = player === Player.Player1? CellState.Cross : CellState.Zero;\r\n        for(var i = 0; i< dimension; i++) {\r\n            if(board[row][i] == playerCellState) rowSum++;\r\n            if(board[i][col] == playerCellState) colSum++;\r\n            if(board[i][i] == playerCellState) diagSum++;\r\n            if(board[i][dimension-i-1] == playerCellState) anitDiagSum++;\r\n        }\r\n        if(rowSum === dimension || colSum === dimension || diagSum === dimension || anitDiagSum === dimension)\r\n            return true;\r\n        return false;\r\n    }\r\n    const switchPlayer = () => {\r\n        if(player === Player.Player1)\r\n            setPlayer(Player.Player2);\r\n        else\r\n            setPlayer(Player.Player1);\r\n    }\r\n    const onCellSelected = (row: number, col: number) => {\r\n        if(board[row][col] !== CellState.Void) {\r\n            return;\r\n        }\r\n        if(player === Player.Player1)\r\n            board[row][col] = CellState.Cross;\r\n        else \r\n            board[row][col] = CellState.Zero;\r\n        \r\n        if(checkWinner(row, col)) {\r\n            alert(`Winner is Player ${player}`);\r\n            resetGame();\r\n            return;\r\n        }\r\n        if(checkGameOver()) {\r\n            alert('Game is Tied !!');\r\n            resetGame();\r\n            return;\r\n        }\r\n        switchPlayer();\r\n    }\r\n\r\n\r\n    const resetGame = () => {\r\n       \r\n        setBoard(new Array(dimension).fill(null).map( () =>new Array(dimension).fill(CellState.Void)));\r\n        setPlayer(Player.Player1);\r\n    }\r\n\r\n    const changeDimension = () => {\r\n        const newDimension =  parseInt(inputRef.current?.value as string);\r\n        if(!newDimension || newDimension < 3) {\r\n            alert('Invalid Dimension !!. Please Enter Valid Dimension');\r\n            return;\r\n        }\r\n\r\n        setDimension(newDimension);\r\n    }\r\n\r\n    useEffect(()=> {\r\n        resetGame();\r\n    }, [dimension])\r\n    return <div className=\"Game\">\r\n        <div style={{display: 'flex', justifyContent: 'space-between', width: '90%'}}>\r\n            <div>\r\n                <input placeholder=\"Board Dimension\" ref={inputRef} defaultValue={dimension} type=\"number\" /> \r\n                <button onClick={changeDimension} >Change Dimension</button>\r\n            </div>\r\n            <button onClick={resetGame}>Reset</button>\r\n        </div>\r\n        <h3>Move Player: {player}</h3>\r\n        <div className=\"Board\">\r\n            {board.map((row, rowIndex) => <div className=\"row\" key={rowIndex}> \r\n                    {row.map((cellValue, colIndex) => <CellComponent key={colIndex} row={rowIndex} col={colIndex} value={cellValue} onClick={onCellSelected} />)}\r\n             </div>)}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Board;\r\n\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Board from './Board';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>Tic Tac Toe</h2>\n      </header>\n      <Board/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}